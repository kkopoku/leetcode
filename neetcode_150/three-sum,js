/**
 *
 *Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] where nums[i] + nums[j] + nums[k] == 0, and the indices i, j and k are all distinct.
 *
 *The output should not contain any duplicate triplets. You may return the output and the triplets in any order.
 *
 *Example 1:
 *
 *Input: nums = [-1,0,1,2,-1,-4]
 *
 *Output: [[-1,-1,2],[-1,0,1]]
 *Explanation:
 *nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
 *nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
 *nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
 *The distinct triplets are [-1,0,1] and [-1,-1,2].
 *
 *Example 2:
 *
 *Input: nums = [0,1,1]
 *
 *Output: []
 *Explanation: The only possible triplet does not sum up to 0.
 *
 *Example 3:
 *
 *Input: nums = [0,0,0]
 *
 *Output: [[0,0,0]]
 *Explanation: The only possible triplet sums up to 0.
 *
 *Constraints:
 *
 *3 <= nums.length <= 1000
 *-10^5 <= nums[i] <= 10^5
 **/

function threeSum(nums) {
  let res = [];

  for (let i = 0; i < nums.length; i++) {
    let pivot = nums[i];
    let l = i == 0 ? 1 : 0;
    let r = (i == nums.length) - 1 ? nums.length - 2 : nums.length;

    while (l < r) {
      let csum = pivot + nums[l] + nums[r];
      if (csum > 0 || r == i) r--;
      else if (csum < 0 || l == i) l++;
      else res.push([nums[i], nums[l], nums[r]]);

      r--;
      l++;
    }
  }
  return res;
}

let input = [-1, 0, 1, 2, -1, -4];

console.log(threeSum(input));
